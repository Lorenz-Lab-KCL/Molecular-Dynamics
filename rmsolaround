#!/usr/bin/env python2

"""
Remove molecules of one type (ie water) that are within the distance of another molecule (ie protein).
"""
import argparse
import os
import MDAnalysis
import sys


if __name__ == "__main__":
    # argument parser
    argparser = argparse.ArgumentParser(description="Removes the surrounding molecules (ie water) surround another group (ie protein) within specified distance. "
        + "See MDAnalysis selection documentation for more complex selection expressions.")
    argparser.add_argument("-f", metavar="input filename", help="input structure filename", required=True, type=str)
    argparser.add_argument("-o", metavar="filename", help="output filename", required=True)
    argparser.add_argument("-d", metavar="float", help="distance in angstroms (default is 2 angstroms)", type=float, default=2.0)
    argparser.add_argument("-central", metavar="selection", help="Group around which we want to remove atoms. Default: \"protein\"", type=str, default="protein")
    argparser.add_argument("-surrounding", metavar="selection", help="Group within the distance to be removed. Default: \"resname SOL\"", type=str, default="resname SOL")

    # parse arguments
    args = argparser.parse_args(sys.argv[1:])
    source_filename = args.f
    assert os.path.exists(source_filename), "Argument -f must point to a file"
    output_filename = args.o
    assert '.' in output_filename, 'The output file name has to have an extension that MDAnalysis is capabable of writing, including .gro or .pdb'
    distance = args.d
    selected_group = args.central
    surround_group = args.surrounding

    u = MDAnalysis.Universe(source_filename)

    main_molecule = u.select_atoms(selected_group)
    print 'Selected group around which to remove water:', main_molecule.residues[0], '...', main_molecule.residues[-1]

    to_be_rm_type = molecule_to_be_rm = u.select_atoms(surround_group)
    print 'Molecule type of which some molecules will be removed counts molecules initially:', len(to_be_rm_type)

    # sol residues to be removed
    surrounding_molecules = u.select_atoms('resname SOL and around %d %s' % (distance, selected_group))

    print ('Removing SOL molecules: %d' % len(surrounding_molecules.residues))

    without_surr_molecules = u.residues.difference(surrounding_molecules.residues)
    without_surr_molecules.atoms.write(output_filename)
    print ('Saved')
